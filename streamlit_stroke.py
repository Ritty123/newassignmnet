# -*- coding: utf-8 -*-
"""streamlit_stroke.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Tmnc-bP9H2jxGOVT4ra2X4XyWoV4crJD
"""

from pycaret.classification import load_model, predict_model
import streamlit as st
import pandas as pd
import numpy as np
model = load_model('Final_model')






def predict(model, input_df):
    predictions_df = predict_model(estimator=model, data=input_df)
    predictions = predictions_df['Label'][0]
    return predictions

def run():
    from PIL import Image
    image = Image.open('brain stroke.jpg')
    image_br = Image.open('stroke image.jpg')
    st.image(image,use_column_width=True)
    add_selectbox = st.sidebar.selectbox(
    "How would you like to predict?",
    ("Online", "Batch"))
    st.sidebar.info('This app is created to predict if any person having a chance for brain stroke')
    st.sidebar.success('https://www.pycaret.org')
    st.sidebar.image(image_br)
    st.title("Chance for Brain Stroke")
    if add_selectbox == 'Online':
        gender =st.selectbox('gender' , ['Female', 'Male'])
        age =st.number_input('age' , min_value=10, max_value=80, value=20)
        hypertension =st.number_input('hypertension',min_value=0, max_value=1, value=0)
        heart_disease = st.number_input('heart_disease', min_value=0, max_value=1, value=1)
        work_type =st.selectbox('work_type' ,['Private', 'Self-employed', 'Govt_job', 'children'])
        avg_glucose_level = st.number_input('avg_glucose_level', min_value=50, max_value=500, value=56)
        bmi = st.number_input('bmi',  min_value=10, max_value=50, value=10)
        smoking_status =st.selectbox('smoking_status', ['formerly smoked', 'never smoked' , 'smokes', 'Unknown'])
        output=""
        input_dict={'gender': gender,'age':age,'hypertension':hypertension,'heart_disease':heart_disease,'work_type':work_type,'avg_glucose_level':avg_glucose_level,'bmi': bmi,'smoking_status ':smoking_status}
        input_df = pd.DataFrame([input_dict])
        if st.button("Predict"):
            output = predict(model=model, input_df=input_df)
            output = str(output)
        st.success('The output is {}'.format(output))
    if add_selectbox == 'Batch':
        file_upload = st.file_uploader("Upload csv file for predictions", type=["csv"])
        if file_upload is not None:
            data = pd.read_csv(file_upload)            
            predictions = predict_model(estimator=model,data=data)
            st.write(predictions)
def main():
    run()

if __name__ == "__main__":
  main()